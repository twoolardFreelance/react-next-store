{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { ApolloClient, defaultDataIdFromObject, HttpLink, InMemoryCache } from 'apollo-boost';\nimport 'isomorphic-unfetch';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport App from 'next/app';\nimport config from '../apollo.config';\nlet globalApolloClient = null;\nconst inMemoryCache = new InMemoryCache({\n  dataIdFromObject: object => object.id || defaultDataIdFromObject(object)\n});\n\nfunction createClient(initState, ctx) {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: config.client.service.url,\n      headers: config.client.service.headers\n    }),\n    cache: inMemoryCache,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'ignore'\n      },\n      query: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all'\n      },\n      mutate: {\n        errorPolicy: 'all'\n      }\n    }\n  });\n}\n\nexport const initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\nexport const initOnContext = ctx => {\n  const inAppContext = Boolean(ctx.ctx); // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn('Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n' + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n');\n    }\n  } // Initialize ApolloClient if not already done\n\n\n  const apolloClient = ctx.apolloClient || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx); // the prop as `null` to the browser.\n\n  apolloClient.toJSON = () => null; // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n\n\n  ctx.apolloClient = apolloClient;\n\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\nexport const withApollo = ({\n  ssr = false\n} = {}) => PageComponent => {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    let client;\n\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(PageComponent, pageProps));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const inAppContext = Boolean(ctx.ctx);\n      const {\n        apolloClient\n      } = initOnContext(ctx); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        const {\n          AppTree\n        } = ctx; // When redirecting, the response is finished.\n        // No point in continuing to render\n\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if dataFromTree is enabled\n\n\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr'); // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n\n            let props;\n\n            if (inAppContext) {\n              props = _objectSpread({}, pageProps, {\n                apolloClient\n              });\n            } else {\n              props = {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient\n                })\n              };\n            } // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n\n\n            await getDataFromTree(__jsx(AppTree, props));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        }\n      }\n\n      return _objectSpread({}, pageProps, {\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient\n      });\n    };\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["/Users/colgate/Desktop/react-store/services/apollo.tsx"],"names":["React","ApolloClient","defaultDataIdFromObject","HttpLink","InMemoryCache","ApolloProvider","App","config","globalApolloClient","inMemoryCache","dataIdFromObject","object","id","createClient","initState","ctx","ssrMode","link","uri","client","service","url","headers","cache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","mutate","initApolloClient","initialState","initOnContext","inAppContext","Boolean","process","env","NODE_ENV","console","warn","apolloClient","apolloState","toJSON","withApollo","ssr","PageComponent","WithApollo","pageProps","undefined","displayName","name","getInitialProps","AppTree","res","finished","getDataFromTree","props","error","extract"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  ApolloClient, defaultDataIdFromObject, HttpLink, InMemoryCache,\n} from 'apollo-boost';\nimport 'isomorphic-unfetch';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport App from 'next/app';\nimport config from '../apollo.config';\n\nlet globalApolloClient = null;\nconst inMemoryCache = new InMemoryCache({\n  dataIdFromObject: (object) => object.id || defaultDataIdFromObject(object),\n});\n\nfunction createClient(initState, ctx) {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: config.client.service.url,\n      headers: config.client.service.headers,\n    }),\n    cache: inMemoryCache,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'ignore',\n      },\n      query: {\n        fetchPolicy: 'no-cache',\n        errorPolicy: 'all',\n      },\n      mutate: {\n        errorPolicy: 'all',\n      },\n    },\n  });\n}\n\nexport const initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createClient(initialState, ctx);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\nexport const initOnContext = (ctx) => {\n  const inAppContext = Boolean(ctx.ctx);\n\n  // We consider installing `withApollo({ ssr: true })` on global App level\n  // as antipattern since it disables project wide Automatic Static Optimization.\n  if (process.env.NODE_ENV === 'development') {\n    if (inAppContext) {\n      console.warn(\n        'Warning: You have opted-out of Automatic Static Optimization due to `withApollo` in `pages/_app`.\\n'\n                + 'Read more: https://err.sh/next.js/opt-out-auto-static-optimization\\n',\n      );\n    }\n  }\n\n  // Initialize ApolloClient if not already done\n  const apolloClient = ctx.apolloClient\n            || initApolloClient(ctx.apolloState || {}, inAppContext ? ctx.ctx : ctx);\n  // the prop as `null` to the browser.\n  apolloClient.toJSON = () => null;\n\n  // Add apolloClient to NextPageContext & NextAppContext.\n  // This allows us to consume the apolloClient inside our\n  // custom `getInitialProps({ apolloClient })`.\n  ctx.apolloClient = apolloClient;\n  if (inAppContext) {\n    ctx.ctx.apolloClient = apolloClient;\n  }\n\n  return ctx;\n};\n\nexport const withApollo = ({ ssr = false } = {}) => (PageComponent) => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n    // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx) => {\n      const inAppContext = Boolean(ctx.ctx);\n      const { apolloClient } = initOnContext(ctx);\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {};\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } else if (inAppContext) {\n        pageProps = await App.getInitialProps(ctx);\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        const { AppTree } = ctx;\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        }\n\n        // Only if dataFromTree is enabled\n        if (ssr && AppTree) {\n          try {\n            // Import `@apollo/react-ssr` dynamically.\n            // We don't want to have this in our client bundle.\n            const { getDataFromTree } = await import('@apollo/react-ssr');\n\n            // Since AppComponents and PageComponents have different context types\n            // we need to modify their props a little.\n            let props;\n            if (inAppContext) {\n              props = { ...pageProps, apolloClient };\n            } else {\n              props = { pageProps: { ...pageProps, apolloClient } };\n            }\n\n            // Take the Next.js AppTree, determine which queries are needed to render,\n            // and fetch them. This method can be pretty slow since it renders\n            // your entire AppTree once for every query. Check out apollo fragments\n            // if you want to reduce the number of rerenders.\n            // https://www.apollographql.com/docs/react/data/fragments/\n            await getDataFromTree(<AppTree {...props} />);\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          }\n        }\n      }\n\n      return {\n        ...pageProps,\n        // Extract query data from the Apollo store\n        apolloState: apolloClient.cache.extract(),\n        // Provide the client for ssr. As soon as this payload\n        // gets JSON.stringified it will remove itself.\n        apolloClient: ctx.apolloClient,\n      };\n    };\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}