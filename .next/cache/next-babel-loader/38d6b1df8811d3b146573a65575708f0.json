{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid } from '@material-ui/core';\nimport featuredProducts from './featured.json';\nimport { PRODUCTS_QUERY } from './_types';\nimport ProductThumbnail from '../ProductThumbnail';\nimport { Styled } from './_styles';\nimport FeaturedProducts from '../sections/FeaturedProducts';\n\nfunction renderGridItems({\n  node\n}, key) {\n  const images = node.images.edges;\n  const imageSrc = images.length ? images[0].node.transformedSrc : '';\n  const altText = images.length ? images[0].node.altText : '';\n\n  if (imageSrc !== '') {\n    return __jsx(Styled.StyledGrid, {\n      key: key,\n      item: true,\n      xs: 12,\n      sm: 6,\n      md: 4,\n      lg: 3\n    }, __jsx(ProductThumbnail, {\n      id: node.id,\n      title: node.title,\n      priceRange: node.priceRange,\n      handle: node.handle,\n      imageSrc: imageSrc,\n      altText: altText\n    }));\n  }\n}\n\nfunction ProductsGrid({\n  variables\n}) {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PRODUCTS_QUERY, {\n    variables\n  });\n  return __jsx(\"div\", null, loading && __jsx(\"div\", null, \"Loading...\"), error && __jsx(\"div\", null, error.message), data && __jsx(React.Fragment, null, __jsx(FeaturedProducts, {\n    render: renderGridItems,\n    featured: data.products.edges.filter(({\n      node\n    }) => featuredProducts.includes(node.handle))\n  }), __jsx(Styled.Title, {\n    variant: \"h5\"\n  }, \"All Products\"), __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, data.products.edges.map(renderGridItems))));\n}\n\nexport default ProductsGrid;","map":{"version":3,"sources":["/Users/colgate/Desktop/react-store/components/ProductsGrid/index.tsx"],"names":["React","useQuery","Grid","featuredProducts","PRODUCTS_QUERY","ProductThumbnail","Styled","FeaturedProducts","renderGridItems","node","key","images","edges","imageSrc","length","transformedSrc","altText","id","title","priceRange","handle","ProductsGrid","variables","loading","error","data","message","products","filter","includes","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,gBAAP,MAA6B,iBAA7B;AAEA,SAAuBC,cAAvB,QAA6C,UAA7C;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;;AASA,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAmCC,GAAnC,EAAwC;AACtC,QAAMC,MAAM,GAAGF,IAAI,CAACE,MAAL,CAAYC,KAA3B;AACA,QAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAP,GAAgBH,MAAM,CAAC,CAAD,CAAN,CAAUF,IAAV,CAAeM,cAA/B,GAAgD,EAAjE;AACA,QAAMC,OAAO,GAAGL,MAAM,CAACG,MAAP,GAAgBH,MAAM,CAAC,CAAD,CAAN,CAAUF,IAAV,CAAeO,OAA/B,GAAyC,EAAzD;;AAEA,MAAIH,QAAQ,KAAK,EAAjB,EAAqB;AACnB,WACE,MAAC,MAAD,CAAQ,UAAR;AAAmB,MAAA,GAAG,EAAEH,GAAxB;AAA6B,MAAA,IAAI,MAAjC;AAAkC,MAAA,EAAE,EAAE,EAAtC;AAA0C,MAAA,EAAE,EAAE,CAA9C;AAAiD,MAAA,EAAE,EAAE,CAArD;AAAwD,MAAA,EAAE,EAAE;AAA5D,OACE,MAAC,gBAAD;AACE,MAAA,EAAE,EAAED,IAAI,CAACQ,EADX;AAEE,MAAA,KAAK,EAAER,IAAI,CAACS,KAFd;AAGE,MAAA,UAAU,EAAET,IAAI,CAACU,UAHnB;AAIE,MAAA,MAAM,EAAEV,IAAI,CAACW,MAJf;AAKE,MAAA,QAAQ,EAAEP,QALZ;AAME,MAAA,OAAO,EAAEG;AANX,MADF,CADF;AAYD;AACF;;AAED,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAA4C;AAC1C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BxB,QAAQ,CACvCG,cADuC,EAEvC;AAAEkB,IAAAA;AAAF,GAFuC,CAAzC;AAKA,SACE,mBACGC,OAAO,IAAI,gCADd,EAGGC,KAAK,IAAI,mBAAMA,KAAK,CAACE,OAAZ,CAHZ,EAKGD,IAAI,IACH,4BACE,MAAC,gBAAD;AACE,IAAA,MAAM,EAAEjB,eADV;AAEE,IAAA,QAAQ,EAAEiB,IAAI,CAACE,QAAL,CAAcf,KAAd,CAAoBgB,MAApB,CACR,CAAC;AAAEnB,MAAAA;AAAF,KAAD,KAAcN,gBAAgB,CAAC0B,QAAjB,CAA0BpB,IAAI,CAACW,MAA/B,CADN;AAFZ,IADF,EAOE,MAAC,MAAD,CAAQ,KAAR;AAAc,IAAA,OAAO,EAAC;AAAtB,oBAPF,EAQE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE;AAAzB,KACGK,IAAI,CAACE,QAAL,CAAcf,KAAd,CAAoBkB,GAApB,CAAwBtB,eAAxB,CADH,CARF,CANJ,CADF;AAsBD;;AAED,eAAea,YAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid } from '@material-ui/core';\nimport featuredProducts from './featured.json';\nimport { ProductSortKeys } from '../../models';\nimport { ProductsType, PRODUCTS_QUERY } from './_types';\nimport ProductThumbnail from '../ProductThumbnail';\nimport { Styled } from './_styles';\nimport FeaturedProducts from '../sections/FeaturedProducts';\n\ntype Props = {\n  query: string;\n  reverse: boolean;\n  sortKey: ProductSortKeys;\n  variables: object;\n};\n\nfunction renderGridItems({ node }, key) {\n  const images = node.images.edges;\n  const imageSrc = images.length ? images[0].node.transformedSrc : '';\n  const altText = images.length ? images[0].node.altText : '';\n\n  if (imageSrc !== '') {\n    return (\n      <Styled.StyledGrid key={key} item xs={12} sm={6} md={4} lg={3}>\n        <ProductThumbnail\n          id={node.id}\n          title={node.title}\n          priceRange={node.priceRange}\n          handle={node.handle}\n          imageSrc={imageSrc}\n          altText={altText}\n        />\n      </Styled.StyledGrid>\n    );\n  }\n}\n\nfunction ProductsGrid({ variables }: Props) {\n  const { loading, error, data } = useQuery<ProductsType, object>(\n    PRODUCTS_QUERY,\n    { variables },\n  );\n\n  return (\n    <div>\n      {loading && <div>Loading...</div>}\n\n      {error && <div>{error.message}</div>}\n\n      {data && (\n        <>\n          <FeaturedProducts\n            render={renderGridItems}\n            featured={data.products.edges.filter(\n              ({ node }) => featuredProducts.includes(node.handle),\n            )}\n          />\n          <Styled.Title variant=\"h5\">All Products</Styled.Title>\n          <Grid container spacing={2}>\n            {data.products.edges.map(renderGridItems)}\n          </Grid>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default ProductsGrid;\n"]},"metadata":{},"sourceType":"module"}